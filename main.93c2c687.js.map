{"version":3,"sources":["scripts/main.js"],"names":["newState","button","document","querySelector","messageStart","messageLose","messageWin","field","scoreField","state","isWin","score","fieldMatrix","children","map","row","buttonHandler","classList","contains","remove","add","innerText","toggle","addTile","render","findEmptyCell","y","x","randomNumber","emtyCells","forEach","rowIndex","cell","columnIndex","push","Math","floor","random","length","elem","move","e","Directions","key","left","right","up","down","i","j","isPosibleToMove","checkRows","newRow","filter","index","splice","concat","Array","fill","reverseRows","reverse","transposeState","_","colIndex","checkColumns","some","addEventListener"],"mappings":"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","file":"main.93c2c687.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst field = document.querySelector('tbody');\nconst scoreField = document.querySelector('.game-score');\n\nlet state = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet newState;\nlet isWin = false;\nlet score = 0;\nconst fieldMatrix = [...field.children].map(row => [...row.children]);\n\nbutton.addEventListener('click', buttonHandler);\ndocument.addEventListener('keydown', move);\n\nfunction buttonHandler() {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    score = 0;\n    messageLose.classList.toggle('hidden', true);\n    messageWin.classList.toggle('hidden', true);\n  }\n\n  addTile();\n  addTile();\n  render();\n}\n\nfunction addTile() {\n  const [y, x] = findEmptyCell();\n\n  state[y][x] = randomNumber();\n}\n\nfunction findEmptyCell() {\n  const emtyCells = [];\n\n  state.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emtyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emtyCells[Math.floor(Math.random() * emtyCells.length)];\n}\n\nfunction randomNumber() {\n  return Math.random() >= 0.9 ? 4 : 2;\n}\n\nfunction render() {\n  state.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      const elem = fieldMatrix[rowIndex][columnIndex];\n\n      elem.classList = 'field-cell';\n\n      if (cell === 0) {\n        elem.innerText = '';\n      } else {\n        elem.innerText = cell;\n        elem.classList.add(`field-cell--${cell}`);\n      }\n    });\n  });\n\n  scoreField.innerText = score;\n}\n\nfunction move(e) {\n  const Directions = {\n    ArrowLeft: 'left',\n    ArrowRight: 'right',\n    ArrowUp: 'up',\n    ArrowDown: 'down',\n  };\n\n  newState = state;\n\n  switch (e.key) {\n    case Directions.ArrowLeft:\n      left();\n      break;\n    case Directions.ArrowRight:\n      right();\n      break;\n    case Directions.ArrowUp:\n      up();\n      break;\n    case Directions.ArrowDown:\n      down();\n      break;\n    default:\n      break;\n  }\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (newState[i][j] !== state[i][j]) {\n        state = newState;\n        addTile();\n        render();\n\n        if (isWin) {\n          messageWin.classList.remove('hidden');\n\n          return;\n        }\n\n        if (!isPosibleToMove()) {\n          messageLose.classList.remove('hidden');\n        }\n\n        return;\n      }\n    }\n  }\n}\n\nfunction left() {\n  if (!checkRows()) {\n    return;\n  }\n\n  newState = newState.map(row => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, index) => {\n      if (cell === newRow[index + 1]) {\n        newRow[index] *= 2;\n        newRow.splice(index + 1, 1);\n        score += newRow[index];\n\n        if (newRow[index] === 2048) {\n          isWin = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(4 - newRow.length).fill(0));\n  });\n}\n\nfunction reverseRows() {\n  newState.forEach(row => row.reverse());\n}\n\nfunction right() {\n  if (!checkRows()) {\n    return;\n  }\n\n  reverseRows();\n  left();\n  reverseRows();\n}\n\nfunction transposeState() {\n  newState = newState[0]\n    .map((_, colIndex) => newState.map(row => row[colIndex]));\n}\n\nfunction up() {\n  transposeState();\n  left();\n  transposeState();\n}\n\nfunction down() {\n  transposeState();\n  right();\n  transposeState();\n}\n\nfunction isPosibleToMove() {\n  if (checkRows()) {\n    return true;\n  }\n\n  transposeState();\n\n  return checkColumns();\n}\n\nfunction checkRows() {\n  for (let i = 0; i < 4; i++) {\n    if (newState[i].some(cell => cell === 0)\n      || newState[i].some((cell, j) => cell === newState[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction checkColumns() {\n  for (let i = 0; i < 4; i++) {\n    if (newState[i].some((cell, j) => cell === newState[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]}